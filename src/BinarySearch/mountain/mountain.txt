/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */

 link - https://leetcode.com/problems/find-in-mountain-array/

class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak = findPeak(mountainArr);
        int count1 = agnosticSearch(mountainArr, target, 0, peak);

        if(count1 == -1){
            int count2 = agnosticSearch(mountainArr, target, peak, mountainArr.length() -1);
            return count2;
        }
        return count1;
    }
    public int findPeak(MountainArray arr){
        int start = 0;
        int end = arr.length() -1;

        while(start < end){
            int mid = start + (end - start)/2;
            if (arr.get(mid) > arr.get(mid +1)){
                end = mid;
            }
            else{
                start = mid + 1;
            }
        }return start;
    }
    public int agnosticSearch(MountainArray arr, int target, int start, int end){

        while (start <= end){
            int mid = start + (end - start)/2;
            int val = arr.get(mid);
            if (val == target){
                return mid;
            }
            if(arr.get(start) < arr.get(end)){
                if(arr.get(mid) < target){
                    start = mid + 1;
                }
                else {
                    end = mid - 1;
                }
            }
            else{
                if (arr.get(mid) < target){
                    end = mid -1;
                }
                else{
                    start = mid + 1;
                }
            }
        }return -1;
    }
}